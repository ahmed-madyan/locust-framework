name: Locust Load Test with Grafana

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - '.github/workflows/**'

jobs:
  load-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install playwright
        playwright install chromium
        
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        
    - name: Start monitoring stack
      run: |
        cd monitoring
        docker-compose up -d
        
    - name: Start Locust Exporter
      run: |
        cd monitoring
        python locust_exporter.py &
      continue-on-error: true
        
    - name: Run Locust Test
      run: |
        locust -f ./simulations/core/DummyJsonLoginCurrentUser_Flow.py --headless --html=locust-report.html
      continue-on-error: true
      
    - name: Configure Grafana
      run: |
        # Wait for Grafana to be ready
        sleep 30
        
        # Add Prometheus data source
        curl -X POST http://admin:admin@localhost:3000/api/datasources \
          -H "Content-Type: application/json" \
          -d '{
            "name": "Prometheus",
            "type": "prometheus",
            "url": "http://prometheus:9090",
            "access": "proxy"
          }'
        
        # Create custom dashboard
        curl -X POST http://admin:admin@localhost:3000/api/dashboards/db \
          -H "Content-Type: application/json" \
          -d '{
            "dashboard": {
              "id": null,
              "title": "Locust Load Test Dashboard",
              "tags": ["locust", "load-testing", "performance"],
              "timezone": "browser",
              "schemaVersion": 30,
              "version": 0,
              "refresh": "5s",
              "panels": [
                {
                  "title": "Current Users",
                  "type": "gauge",
                  "datasource": "Prometheus",
                  "gridPos": {"h": 4, "w": 6, "x": 0, "y": 0},
                  "fieldConfig": {
                    "defaults": {
                      "thresholds": {
                        "mode": "absolute",
                        "steps": [
                          {"color": "green", "value": null},
                          {"color": "yellow", "value": 50},
                          {"color": "red", "value": 100}
                        ]
                      }
                    }
                  },
                  "targets": [
                    {
                      "expr": "locust_users_current",
                      "legendFormat": "Users"
                    }
                  ]
                },
                {
                  "title": "User Spawn Rate",
                  "type": "gauge",
                  "datasource": "Prometheus",
                  "gridPos": {"h": 4, "w": 6, "x": 6, "y": 0},
                  "fieldConfig": {
                    "defaults": {
                      "thresholds": {
                        "mode": "absolute",
                        "steps": [
                          {"color": "green", "value": null},
                          {"color": "yellow", "value": 5},
                          {"color": "red", "value": 10}
                        ]
                      }
                    }
                  },
                  "targets": [
                    {
                      "expr": "locust_users_spawn_rate",
                      "legendFormat": "Users/sec"
                    }
                  ]
                },
                {
                  "title": "Response Times",
                  "type": "graph",
                  "datasource": "Prometheus",
                  "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0},
                  "targets": [
                    {
                      "expr": "locust_response_time_percentile{percentile=\"95\"}",
                      "legendFormat": "95th Percentile"
                    },
                    {
                      "expr": "locust_response_time_percentile{percentile=\"50\"}",
                      "legendFormat": "Median"
                    },
                    {
                      "expr": "locust_response_time_percentile{percentile=\"99\"}",
                      "legendFormat": "99th Percentile"
                    }
                  ]
                },
                {
                  "title": "Request Rate",
                  "type": "graph",
                  "datasource": "Prometheus",
                  "gridPos": {"h": 8, "w": 12, "x": 0, "y": 4},
                  "targets": [
                    {
                      "expr": "rate(locust_requests_total[1m])",
                      "legendFormat": "Requests/sec"
                    }
                  ]
                },
                {
                  "title": "Failure Rate",
                  "type": "graph",
                  "datasource": "Prometheus",
                  "gridPos": {"h": 8, "w": 12, "x": 12, "y": 4},
                  "targets": [
                    {
                      "expr": "rate(locust_failures_total[1m])",
                      "legendFormat": "Failures/sec"
                    }
                  ]
                },
                {
                  "title": "Response Time Distribution",
                  "type": "heatmap",
                  "datasource": "Prometheus",
                  "gridPos": {"h": 8, "w": 12, "x": 0, "y": 12},
                  "targets": [
                    {
                      "expr": "sum(rate(locust_response_time_buckets[1m])) by (le)",
                      "legendFormat": "{{le}}"
                    }
                  ]
                },
                {
                  "title": "Request Status Codes",
                  "type": "piechart",
                  "datasource": "Prometheus",
                  "gridPos": {"h": 8, "w": 12, "x": 12, "y": 12},
                  "targets": [
                    {
                      "expr": "sum(locust_requests_total) by (status)",
                      "legendFormat": "{{status}}"
                    }
                  ]
                },
                {
                  "title": "Response Time by Endpoint",
                  "type": "bargauge",
                  "datasource": "Prometheus",
                  "gridPos": {"h": 8, "w": 12, "x": 0, "y": 20},
                  "targets": [
                    {
                      "expr": "locust_response_time_percentile{percentile=\"95\"}",
                      "legendFormat": "{{name}}"
                    }
                  ]
                },
                {
                  "title": "Failure Rate by Endpoint",
                  "type": "bargauge",
                  "datasource": "Prometheus",
                  "gridPos": {"h": 8, "w": 12, "x": 12, "y": 20},
                  "targets": [
                    {
                      "expr": "rate(locust_failures_total[1m])",
                      "legendFormat": "{{name}}"
                    }
                  ]
                }
              ]
            },
            "overwrite": true
          }'
      
    - name: Capture Grafana Screenshot
      run: |
        cd monitoring
        python capture_screenshot.py
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: locust-report
        path: locust-report.html
          
    - name: Upload Grafana Screenshot
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: grafana-dashboard
        path: monitoring/grafana-screenshot.png 